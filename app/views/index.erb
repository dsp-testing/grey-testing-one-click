<!DOCTYPE html>
<html>
  <head>
    <title>Where is Grey?</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script src="javascript/geoxml3.js"></script>
    <script>
      var map;

      function initMap() {
        var myLatLng = {
          lat: <%= latest_check_in&.latitude || 51.56853 %>,
          lng: <%= latest_check_in&.longitude || 0.01077 %>
        };

        // Create a map object and specify the DOM element for display.
        map = new google.maps.Map(document.getElementById('map'), {
          center: myLatLng,
          zoom: 4
        });

        <% unless latest_check_in.nil? %>
          // Create a marker and set its position.
          var marker = new google.maps.Marker({
            map: map,
            position: myLatLng
          });

          var infowindow = new google.maps.InfoWindow({
            content: '<div id="content"><p><strong>Last check-in:</strong> <%= latest_check_in.sent_at.localtime.strftime('%F %l:%M %P') %></p></div>'
          });

          marker.addListener('click', function() {
            infowindow.open(map, marker);
          });
        <% end %>

        // Create a polyline of the path so far.
        var paths = <%= path_so_far.to_json %>
        var lengthSoFar = 0

        for (var i = 0; i < paths.length; i++) {
          var pathSoFar = new google.maps.Polyline({
            path: paths[i],
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 0.45,
            strokeWeight: 3
          });

          pathSoFar.setMap(map);

          lengthSoFar += polylineLength(pathSoFar)

          // Add an infoWindow to the path
          var pathInfoWindow = new google.maps.InfoWindow({
            content: '<h3>Route so far</h3><p>Total distance: ' + lengthSoFar.toFixed(0) + ' miles</p>',
            pixelOffset: new google.maps.Size(0, 2)
          });

          pathSoFar.infoWindow = pathInfoWindow;

          // Infowindow-opening event handler
          google.maps.event.addListener(pathSoFar, 'click', function(e) {
            pathSoFar.infoWindow.close();
            if (e && e.latLng) {
              pathSoFar.infoWindow.setPosition(e.latLng);
            } else {
              pathSoFar.infoWindow.setPosition(point);
            }
            pathSoFar.infoWindow.open(pathSoFar.map || pathSoFar.polylines[0].map);
          });
        }

        function polylineLength(polyline) {
          var meters = google.maps.geometry.spherical.computeLength(polyline.getPath());
          return meters * 0.000621371
        }

        // Parse the route KML and display it on the map
        var kmlParser = new geoXML3.parser({
          map: map,
          singleInfoWindow: true,
          zoom: false,
          afterParse: function (docSet) {
            for (var i = 0; i < docSet[0].gpolylines.length; i++) {
              var poly = docSet[0].gpolylines[i];
              poly.infoWindowOptions.content += '<p>' + polylineLength(poly).toFixed(0) + ' miles</p>';
            }
          }
        });

        kmlParser.parse('/route.kml')
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= api_key %>&callback=initMap&libraries=geometry"
    async defer></script>
  </body>
</html>
